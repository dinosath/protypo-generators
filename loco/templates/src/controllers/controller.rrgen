{# generate controllers #}
{% import "macros.tpl" as macros %}

{% for entity in entities -%}
{% if entity.properties %}

{% set file_name = entity.title | snake_case -%}
{% set module_name = file_name | pascal_case -%}
to: {{ outputFolder }}/src/controllers/{{ file_name }}.rs
message: "Controller `{{module_name}}` was added successfully."
injections:
- into: {{ outputFolder }}/src/controllers/mod.rs
  append: true
  content: "pub mod {{ file_name }};"
- into: {{ outputFolder }}/src/app.rs
  after: "AppRoutes::"
  content: "            .add_route(controllers::{{ file_name }}::routes())"
===
#![allow(clippy::missing_errors_doc)]
#![allow(clippy::unnecessary_struct_initialization)]
#![allow(clippy::unused_async)]
use loco_rs::prelude::*;
use serde::{Deserialize, Serialize};
use axum::{debug_handler,extract::Query};
{{ macros::seaorm_prelude_imports(entity=entity)|trim }}
use crate::models::entities::{{ file_name }}::{ActiveModel, Entity, Model, Column};
use super::utils::ListParams;


#[derive(Clone, Debug, Serialize, Deserialize)]
pub struct Params {
    {% for name, property in entity.properties -%}
    {%- if property.readOnly-%}{% continue -%}{%- endif -%}
    {%- if macros::relation_is_many_to_many(property=property)=='true' -%}
    pub {{ name | snake_case }}:Vec<i32>,
    {% elif property.type -%}
    pub {{ macros::get_name(name=name, property=property) | snake_case }}: {{ macros::get_type_with_option(name=name, property=property, required_fields=entity.required) }} {%- if not loop.last -%},{%- endif %}
    {% endif -%}
    {% endfor %}
}

impl Params {
    fn update(&self, item: &mut ActiveModel) {
      {% for name, property in entity.properties -%}
        {%- if property.readOnly or macros::relation_is_many_to_many(property=property)=='true' -%}{% continue -%}{%- endif -%}
        {%- if property.type  -%}
      item.{{ macros::get_name(name=name, property=property) | snake_case }} = Set(self.{{ macros::get_name(name=name, property=property) | snake_case }}.clone());
        {% endif -%}
      {%- endfor -%}
    }
}

async fn load_item(ctx: &AppContext, id: i32) -> Result<Model> {
    let item = Entity::find_by_id(id).one(&ctx.db).await?;
    item.ok_or_else(|| Error::NotFound)
}

#[debug_handler]
pub async fn list(State(ctx): State<AppContext>, Query(params): Query<ListParams>) -> Result<Response> {
    let ids = params.ids.unwrap_or_default();
    let offset = params.offset.unwrap_or(0);
    let limit = params.limit.unwrap_or(10);

    let mut query = Entity::find();
    if !ids.is_empty() {
        query = query.filter(Column::Id.is_in(ids));
    }

    let users = query.all(&ctx.db).await?;
    format::json(users)
}

#[debug_handler]
pub async fn add(State(ctx): State<AppContext>, Json(params): Json<Params>) -> Result<Response> {
    let mut item = ActiveModel {
        ..Default::default()
    };
    params.update(&mut item);
    let item = item.insert(&ctx.db).await?;
    format::json(item)
}

#[debug_handler]
pub async fn update(
    Path(id): Path<i32>,
    State(ctx): State<AppContext>,
    Json(params): Json<Params>,
) -> Result<Response> {
    let item = load_item(&ctx, id).await?;
    let mut item = item.into_active_model();
    params.update(&mut item);
    let item = item.update(&ctx.db).await?;
    format::json(item)
}

#[debug_handler]
pub async fn remove(Path(id): Path<i32>, State(ctx): State<AppContext>) -> Result<Response> {
    load_item(&ctx, id).await?.delete(&ctx.db).await?;
    format::empty()
}

#[debug_handler]
pub async fn get_one(Path(id): Path<i32>, State(ctx): State<AppContext>) -> Result<Response> {
    format::json(load_item(&ctx, id).await?)
}

pub fn routes() -> Routes {
    Routes::new()
        .prefix("{{file_name | plural}}")
        .add("/", get(list))
        .add("/", post(add))
        .add("/:id", get(get_one))
        .add("/:id", delete(remove))
        .add("/:id", post(update))
}
---
{% endif %}
{% endfor -%}