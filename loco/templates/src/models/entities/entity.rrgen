{# generate entities #}
{% import "macros.tpl" as macros %}

{% for entity in entities -%}
{% if entity.properties %}

{% set file_name = entity.title | snake_case -%}
{% set module_name = file_name | pascal_case -%}
to: {{ outputFolder }}/src/models/entities/{{ file_name }}.rs
message: "Entity `{{module_name}}` was added successfully."
injections:
- into: {{ outputFolder }}/src/models/entities/mod.rs
  append: true
  content: "pub mod {{ file_name }};"
===
use sea_orm::entity::prelude::*;
use serde::{Serialize, Deserialize};
{{ self::enum_imports(entity=entity) }}
{{ self::seaorm_prelude_imports(entity=entity)|trim }}

{% for name,property in entity.properties -%}
    {% if property.enum -%}
#[derive(PartialEq, Clone, Debug, Eq, EnumIter, DeriveActiveEnum, Serialize, Deserialize)]
#[sea_orm(rs_type = "String", db_type = "String(StringLen::None)", enum_name = "{{ name | snake_case }}")]
enum {{ name | pascal_case }}{
        {% for enum in property.enum -%}
        #[sea_orm(string_value = "{{ enum | snake_case }}")]
        {{ enum }}{%- if not loop.last -%},{% endif -%}
        {% endfor %}
}
    {% endif -%}
{% endfor -%}

#[derive(Clone, Debug, PartialEq, DeriveEntityModel, Serialize, Deserialize)]
#[sea_orm(schema_name="public", table_name = "{{ entity.title | snake_case }}")]
pub struct Model {
    #[sea_orm(primary_key)]
    #[serde(skip_deserializing)]
    pub id: i32,
    pub created_at: DateTimeWithTimeZone,
    pub updated_at: DateTimeWithTimeZone,
    {%- for name, property in entity.properties -%}
    {% if macros::relation_is_many_to_many(property=property)=='false' -%}
    {{self::validations(name=name,property=property)}}
    pub {{ name | snake_case }}: {{ macros::get_type_with_option(name=name, property=property, required_fields=entity.required) }}{%- if not loop.last -%},{% endif -%}
    {% endif -%}
    {% endfor %}
}

#[derive(Copy, Clone, Debug, EnumIter, DeriveRelation)]
pub enum Relation {
{% for name,property in entity.properties -%}
    {% if self::relation_is_one_to_many(property=property)=='true' -%}
        {% set relation = self::get_relation(property=property) | snake_case -%}
    #[sea_orm(has_many = "crate::models::entities::{{ relation }}::Entity")]
    {{ name | title }},

    {%- elif self::relation_is_many_to_one(property=property)=='true' -%}
        {% set relation = self::get_relation(property=property) | snake_case -%}
    #[sea_orm(belongs_to = "crate::models::entities::{{ relation }}::Entity",
    from = "Column::{{ name | pascal_case }}",
    to = "crate::models::entities::{{ relation }}::Column::Id")]
    {{ name | title }},

    
    {% elif self::relation_is_many_to_many(property=property)=='true'-%}
    {% set relation = macros::get_m2m_relation(left=entity.title, property=property) | snake_case-%} 
    #[sea_orm(has_many = "crate::models::entities::{{ relation }}::Entity")]
    {{ relation | pascal_case }},
    {% endif -%}
{% endfor %}
}

{% set_global implemented_relations = [] -%}
{% for name,property in entity.properties -%}
    {%- set relation = self::get_relation(property=property) | snake_case -%}
    {%- if self::is_relation(property=property)=='true' and relation not in implemented_relations-%}
        {%- set_global implemented_relations = implemented_relations | concat(with=relation)  -%}
        {%- if self::relation_is_many_to_many(property=property)=='true'-%}
impl Related<crate::models::entities::{{ relation }}::Entity> for Entity {
    {% set relation = macros::get_m2m_relation(left=entity.title, property=property) -%} 
    fn to() -> RelationDef {
        crate::models::entities::{{ relation | snake_case }}::Relation::{{ relation | split(pat="_") | first | pascal_case}}.def()
    }

    fn via() -> Option<RelationDef> {
        Some(crate::models::entities::{{ relation | snake_case }}::Relation::{{ relation | split(pat="_") | last | pascal_case }}.def().rev())
    }
}

impl Related<super::{{ relation | snake_case }}::Entity> for Entity {
    fn to() -> RelationDef {
        Relation::{{ relation | pascal_case }}.def()
    }
}

        {% else -%}

impl Related<crate::models::entities::{{ relation }}::Entity> for Entity {
    fn to() -> RelationDef {
        Relation::{{ name | title }}.def()
    }
}
        {%- endif -%}
    {%- endif -%}
{%- endfor -%}

{% if features and 'graphql' in features  %}
#[derive(Copy, Clone, Debug, EnumIter, DeriveRelatedEntity)]
pub enum RelatedEntity {
    {% for name,property in entity.properties -%}
    {%- set relation = self::get_relation(property=property) | snake_case -%}
    {%- if self::is_relation(property=property)=='true' -%}
    #[sea_orm(entity = "crate::models::entities::{{ relation }}::Entity")]
    {{ name | pascal_case }}
    {%- if self::relation_is_many_to_many(property=property)=='true'-%}
    {% set relation = macros::get_m2m_relation(left=entity.title, property=property) -%} 
    ,
    #[sea_orm(entity = "crate::models::entities::{{ relation | snake_case }}::Entity")]
    {{ relation | pascal_case }}
    {% endif -%}
    {%- if not loop.last -%},{% endif -%}
    {% endif -%}
{% endfor %}
}
{% endif -%}

{% if file_name=="user" %}
{% include "user_active_model.tpl" -%}
{% else -%}
impl ActiveModelBehavior for ActiveModel {
}
{% endif -%}
---
{% endif %}
{% endfor -%}