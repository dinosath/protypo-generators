{# generate entities #}
{% import "macros.tpl" as macros %}

{% for entity in entities -%}
{% set file_name = entity.title | snake_case -%}
{% set module_name = file_name | pascal_case -%}
to: {{ outputFolder }}/src/models/_entities/{{ file_name | plural }}.rs
message: "Entity `{{module_name}}` was added successfully."
injections:
- into: {{ outputFolder }}/src/models/_entities/mod.rs
  append: true
  content: "pub mod {{ file_name | plural }};"
===
use sea_orm::entity::prelude::*;
use serde::{Serialize, Deserialize};

{{ self::seaorm_prelude_imports(entity=entity)|trim }}

{%- set_global mto_relations = [] -%}
{%- for name,property in entity.properties -%}
    {%- if self::relation_is_many_to_one(property=property)=='true' -%}
        {%- set relation = self::get_relation(property=property) | snake_case | plural -%}
        {%- set_global mto_relations = mto_relations | concat(with=relation)  -%}
    {%- endif -%}
{%- endfor -%}

{%- set_global otm_relations = [] -%}
{%- for name,property in entity.properties -%}
    {%- if self::relation_is_one_to_many(property=property)=='true' -%}
        {%- set relation = self::get_relation(property=property) | snake_case | plural -%}
        {%- set_global otm_relations = otm_relations | concat(with=relation)  -%}
    {%- endif -%}
{%- endfor -%}
use crate::models::{ {{ mto_relations | concat(with=otm_relations) | unique | join(sep=",") }} };

{% for name,property in entity.properties -%}
    {% if property.enum -%}
#[derive(PartialEq, Clone, Debug, Eq)]
enum {{ name | capitalize }}{
        {% for enum in property.enum -%}
        {{ enum }}{%- if not loop.last -%},{% endif -%}
        {% endfor %}
}
    {% endif -%}
{% endfor %}

#[derive(Clone, Debug, PartialEq, DeriveEntityModel, Serialize, Deserialize)]
#[sea_orm(table_name = "{{ file_name | plural }}")]
pub struct Model {
    #[sea_orm(primary_key)]
    pub id: i32,
    pub created_at: DateTime,
    pub updated_at: DateTime,
    {%- for property_name, property in entity.properties %}
        {%- if property.type or property.enum %}
    pub {{ property_name }}: {{ self::get_type(name=property_name, property=property)|trim }}{%- if not loop.last -%},{% endif -%}
        {% endif -%}
    {% endfor %}
}

#[derive(Copy, Clone, Debug, EnumIter, DeriveRelation)]
pub enum Relation {
{% for name,property in entity.properties -%}
    {% if self::relation_is_one_to_many(property=property)=='true' -%}
        {% set relation = self::get_relation(property=property) | snake_case | plural -%}
    #[sea_orm(has_many = "crate::models::_entities::{{ relation }}::Entity")]
    {{ name | title }},    

    {% elif self::relation_is_many_to_one(property=property)=='true' -%}
        {% set relation = self::get_relation(property=property) | snake_case | plural -%}
    #[sea_orm(belongs_to = "crate::models::_entities::{{ relation }}::Entity",
    from = "Column::{{ relation | title }}Id",
    to = "crate::models::_entities::{{ relation }}::Column::Id")]
    {{ name | title }},

    {% endif %}
{% endfor -%}
}

{%- set_global implemented_relations = [] -%}
{% for name,property in entity.properties -%}
    {% set relation = self::get_relation(property=property) | snake_case | plural -%}
    {% if self::relation_is_one_to_many(property=property)=='true' and relation not in implemented_relations -%}
        
impl Related<crate::models::_entities::{{ relation }}::Entity> for Entity {
    fn to() -> RelationDef {
        Relation::{{ name | title }}.def()
    }
}
        {%- set_global implemented_relations = implemented_relations | concat(with=relation)  -%}
    {%- elif self::relation_is_many_to_one(property=property)=='true' and relation not in implemented_relations -%}
        
impl Related<crate::models::_entities::{{ relation }}::Entity> for Entity {
    fn to() -> RelationDef {
        Relation::{{ name | title }}.def()
    }
}
        {%- set_global implemented_relations = implemented_relations | concat(with=relation)  -%}
    {% endif %}
{% endfor %}
---
{% endfor -%}