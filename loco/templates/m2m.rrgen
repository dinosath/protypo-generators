{# generate entities #}
{% import "_macros.tpl" as macros -%}

{% set relations = macros::get_m2m_relations(entities=entities) | split(pat=",") -%}
{% for relation in relations -%}
{% set left = relation | split(pat="_") | first %}
{% set right = relation | split(pat="_") | last %}
{% set file_name = relation | snake_case %}
to: {{ values.outputFolder }}/src/models/entities/{{ file_name }}.rs
message: "Entity `{{ file_name }}` was added successfully."
injections:
- into: {{ values.outputFolder }}/src/models/entities/mod.rs
  append: true
  content: "pub mod {{ file_name }};"
===
use sea_orm::entity::prelude::*;
use serde::{Serialize, Deserialize};

#[derive(Clone, Debug, PartialEq, Eq, DeriveEntityModel, Serialize, Deserialize)]
#[sea_orm(table_name = "{{ file_name }}")]
pub struct Model {
    #[sea_orm(primary_key, auto_increment = false)]
    pub {{ left | snake_case }}_id: i32,
    #[sea_orm(primary_key, auto_increment = false)]
    pub {{ right | snake_case }}_id: i32,
}

#[derive(Copy, Clone, Debug, EnumIter, DeriveRelation)]
pub enum Relation {
    #[sea_orm(
        belongs_to = "crate::models::entities::{{ left | snake_case }}::Entity",
        from = "Column::{{ left | pascal_case }}Id",
        to = "crate::models::entities::{{ left | snake_case }}::Column::Id",
        on_update = "Cascade",
        on_delete = "Cascade"
    )]
    {{ left | pascal_case }},
    #[sea_orm(
        belongs_to = "crate::models::entities::{{ right | snake_case }}::Entity",
        from = "Column::{{ right | pascal_case }}Id",
        to = "crate::models::entities::{{ right | snake_case }}::Column::Id",
        on_update = "Cascade",
        on_delete = "Cascade"
    )]
    {{ right | pascal_case }},
}

impl Related<crate::models::entities::{{ left | snake_case }}::Entity> for Entity {
    fn to() -> RelationDef {
        Relation::{{ left | pascal_case }}.def()
    }
}

impl Related<crate::models::entities::{{ right | snake_case }}::Entity> for Entity {
    fn to() -> RelationDef {
        Relation::{{ right | pascal_case }}.def()
    }
}

#[derive(Copy, Clone, Debug, EnumIter, DeriveRelatedEntity)]
pub enum RelatedEntity {
    #[sea_orm(entity = "super::{{ left | snake_case }}::Entity")]
    {{ left | pascal_case }},
    #[sea_orm(entity = "super::{{ right | snake_case }}::Entity")]
    {{ right | pascal_case }},
}

impl ActiveModelBehavior for ActiveModel {
}
---
{% endfor -%}