{# generate entities #}
{% import "macros.tpl" as macros -%}

{% set relations = macros::get_m2m_relations(entities=entities) | split(pat=",") -%}
{% for relation in relations -%}
{% set file_name = relation | snake_case -%}
{% set left = relation | split(pat="_") | first -%}
{% set right = relation | split(pat="_") | last -%}

to: {{ outputFolder }}/migration/src/{{ file_name }}.rs
message: "Migration `{{file_name}}` was added successfully."
injections:
- into: {{ outputFolder }}/migration/src/lib.rs
  after: "pub struct Migrator;"
  content: "mod {{ file_name }};"
- into: {{ outputFolder }}/migration/src/lib.rs
  after: "//migrations_end"
  content: "Box::new({{ file_name }}::Migration),"
===
use loco_rs::schema::{table_auto_tz,timestamptz,timestamptz_null};
use sea_orm_migration::{prelude::*, schema::*};

#[derive(DeriveMigrationName)]
pub struct Migration;

#[async_trait::async_trait]
impl MigrationTrait for Migration {
    async fn up(&self, manager: &SchemaManager) -> Result<(), DbErr> {

        manager
            .create_table(
                Table::create()
                    .table({{ file_name | pascal_case }}::Table)
                    .col(integer({{ file_name | pascal_case }}::{{ left | pascal_case }}Id))
                    .col(integer({{ file_name | pascal_case }}::{{ right | pascal_case }}Id))
                    .primary_key(
                        Index::create()
                            .name("pk-{{ file_name | snake_case }}")
                            .col({{ file_name | pascal_case }}::{{ left | pascal_case }}Id)
                            .col({{ file_name | pascal_case }}::{{ right | pascal_case }}Id),
                    )
                    .foreign_key(
                        ForeignKey::create()
                            .name("fk-{{ file_name | snake_case }}-{{ left | snake_case }}_id")
                            .from({{ file_name | pascal_case }}::Table, {{ file_name | pascal_case }}::{{ left | pascal_case }}Id)
                            .to({{ left | plural | pascal_case }}::Table, {{ left | plural | pascal_case }}::Id)
                            .on_delete(ForeignKeyAction::Cascade)
                            .on_update(ForeignKeyAction::Cascade),
                    )
                    .foreign_key(
                        ForeignKey::create()
                            .name("fk-{{ file_name | snake_case }}-{{ right | snake_case }}_id")
                            .from({{ file_name | pascal_case }}::Table, {{ file_name | pascal_case }}::{{ right | pascal_case }}Id)
                            .to({{ right | plural | pascal_case }}::Table, {{ right | plural | pascal_case }}::Id)
                            .on_delete(ForeignKeyAction::Cascade)
                            .on_update(ForeignKeyAction::Cascade),
                    )
                    .to_owned()
                .if_not_exists()
                .to_owned(),
            )
            .await
    }

    async fn down(&self, manager: &SchemaManager) -> Result<(), DbErr> {
        manager
            .drop_table(Table::drop().table({{ file_name | pascal_case }}::Table).to_owned())
            .await
    }
}

#[derive(DeriveIden)]
enum {{ file_name | pascal_case }} {
    Table,
    {{ left | pascal_case }}Id,
    {{ right | pascal_case }}Id
}

#[derive(DeriveIden)]
enum {{ left | plural | pascal_case }} {
    Table,
    Id
}

#[derive(DeriveIden)]
enum {{ right | plural | pascal_case }} {
    Table,
    Id
}
---
{% endfor -%}