{# generate controllers #}
{% import "macros.tpl" as macros %}

{% for entity in entities -%}
{% set file_name = entity.title | snake_case -%}
{% set module_name = file_name | pascal_case -%}
{% set enum_name = entity.title | pascal_case -%}
to: {{ outputFolder }}/migration/src/{{ file_name }}.rs
message: "Migration `{{module_name}}` was added successfully."
===
use loco_rs::schema::{table_auto_tz,timestamptz,timestamptz_null};
use sea_orm_migration::{prelude::*, schema::*};
{% if entity.enum %}
use sea_orm_migration::sea_orm::{DbBackend, Statement};
use sea_orm_migration::prelude::sea_query::extension::postgres::Type;
{% endif %}

#[derive(DeriveMigrationName)]
pub struct Migration;

#[async_trait::async_trait]
impl MigrationTrait for Migration {
    async fn up(&self, manager: &SchemaManager) -> Result<(), DbErr> {
{% if entity.properties %}
        manager
            .create_table(
                table_auto_tz({{ enum_name }}::Table)
                .if_not_exists()
                    .col(pk_auto({{ enum_name }}::Id))                    
                    {% for name, property in entity.properties -%}
                    {% if macros::relation_is_many_to_many(property=property)=='true' or macros::relation_is_one_to_many(property=property)=='true' -%}{% continue -%}{% endif -%}
                    {%- if macros::relation_is_many_to_one(property=property)=='true' -%}
                    {%- set relation = macros::get_relation(property=property) -%}
                    .col(unsigned_null({{ enum_name }}::{{ name | pascal_case }}{% if macros::m21_relation_equal_name(name=name,property=property)=='true' -%}Id{% endif -%}))
                    .foreign_key(
                        ForeignKey::create()
                            .name("fk-{{ enum_name | snake_case }}-{{ name | snake_case }}{% if macros::m21_relation_equal_name(name=name,property=property)=='true' -%}_id{% endif -%}")
                            .from({{ enum_name }}::Table, {{ enum_name }}::{{ name | pascal_case }}{% if macros::m21_relation_equal_name(name=name,property=property)=='true' -%}Id{% endif -%})
                            .to({{ relation | pascal_case }}::Table, {{ relation | pascal_case }}::Id)
                            .on_delete(ForeignKeyAction::Cascade)
                            .on_update(ForeignKeyAction::Cascade),
                    )
                    {% else -%}
                    .col({{ macros::get_migration_type(name=name,property=property,required=entity.required) }}({{ enum_name }}::{{ name | pascal_case }}
                    {%- if property.enum -%}
                    ,Alias::new("{{ name | snake_case }}"),{{ name | pascal_case }}::iter()
                    {%- endif -%}
                    ))
                    {% endif -%}
                    {% endfor -%}
                    .to_owned(),
            )
            .await
{% elif entity.enum -%}
        let db = manager.get_connection();

        match db.get_database_backend() {
            DbBackend::MySql | DbBackend::Sqlite => {}
            DbBackend::Postgres => {
                let create_enum_if_not_exists = r#"
                    DO $$
                    BEGIN
                        IF NOT EXISTS (SELECT 1 FROM pg_type WHERE typname = '{{ entity.title|snake_case }}') THEN
                            CREATE TYPE approval_status AS ENUM (
                                {% for enum in entity.enum -%}
                                '{{ enum }}'{%- if not loop.last -%},{% endif -%}
                                {% endfor %}
                            );
                        END IF;
                    END $$;
                "#;

                // Execute the raw SQL statement
                db.execute(Statement::from_string(DbBackend::Postgres, create_enum_if_not_exists.to_owned()))
                    .await?;
            }
        }
        Ok(())

{% endif %}
    }

    async fn down(&self, manager: &SchemaManager) -> Result<(), DbErr> {

{% if entity.properties %}
        manager
            .drop_table(Table::drop().table({{ enum_name }}::Table).to_owned())
            .await
{% elif entity.enum %}
        let db = manager.get_connection();

        match db.get_database_backend() {
            DbBackend::MySql | DbBackend::Sqlite => {}
            DbBackend::Postgres => {
                manager
                    .drop_type(Type::drop().name({{ entity.title|pascal_case }}::Enum).to_owned())
                    .await?;
            }
        }

        Ok(())

{% endif %}
    }
}

{% set m21_relations = macros::get_m21_relations_type(entity=entity) | trim -%}
{% if m21_relations | length > 0 -%}
{% set m21_relations = m21_relations | split(pat=",") | unique -%}
{% for relation in m21_relations -%}
#[derive(DeriveIden)]
enum {{ relation | pascal_case }} {
    Table,
    Id,
}
{% endfor -%}
{% endif %}

{% if entity.properties -%}
{% for name, property in entity.properties -%}
{% if property.enum -%}
#[derive(Iden, EnumIter)]
pub enum {{ name | pascal_case }} {
{% for enum in property.enum -%}
#[iden = "{{ enum }}"]
{{ enum }}{%- if not loop.last -%},{% endif -%}
{% endfor -%}
}
{% endif -%}
{% endfor -%}

#[derive(DeriveIden)]
enum {{ enum_name }} {
    Table,
    Id,
    {% for name, property in entity.properties -%}
    {% if macros::relation_is_many_to_many(property=property)=='true' or macros::relation_is_one_to_many(property=property)=='true' -%}{% continue -%}{% endif -%}
    {{ name | pascal_case }}{% if macros::m21_relation_equal_name(name=name,property=property)=='true' -%}Id{% endif -%}{%- if not loop.last -%},{%- endif %}
    {% endfor %}
}
{% elif entity.enum %}
#[derive(DeriveIden)]
pub enum {{ entity.title|pascal_case }} {
    #[sea_orm(iden = "{{ entity.title|snake_case }}")]
    Enum,
{% for enum in entity.enum -%}
    #[sea_orm(iden = "{{ enum }}")]
    {{ enum }}{%- if not loop.last -%},{% endif -%}
{% endfor %}
}
{% endif %}
---
{% endfor -%}